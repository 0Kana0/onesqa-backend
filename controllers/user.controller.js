// controllers/user.controller.js
const { Op, fn, col, where: whereFn } = require("sequelize");
const db = require("../db/models"); // ‡∏´‡∏£‡∏∑‡∏≠ '../../db/models' ‡∏ñ‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ path ‡∏ô‡∏±‡πâ‡∏ô
const { User, User_role, User_ai, Role, Ai } = db;
const { auditLog } = require("../utils/auditLog"); // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
const { notifyUser } = require("../utils/notifier"); // ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå service/controller ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

exports.listUsers = async ({ page = 1, pageSize = 5, where = {} }) => {
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
  const limit = Math.min(Math.max(Number(pageSize) || 5, 1), 100);
  const p = Math.max(Number(page) || 1, 1);
  const offset = (p - 1) * limit;

  const { role, status, search  } = where || {};

  // ---------- main where ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á User ----------
  const userWhere = {};
  if (typeof status === "string" && status.trim() !== "") {
    const s = status.trim().toLowerCase();
    if (["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", "true", "1"].includes(s)) userWhere.is_online = true;
    else if (["‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "false", "0"].includes(s))
      userWhere.is_online = false;
  }

  //console.log(role);
  // üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏ä‡∏∑‡πà‡∏≠ + ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ + ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
  const full = (search || '').replace(/\s+/g, ' ').trim(); // "${firstname} ${lastname}"
  if (full) {
    userWhere[Op.and] = [
      whereFn(
        fn('concat_ws', ' ', col('firstname'), col('lastname')),
        { [Op.iLike]: `%${full}%` }
      ),
    ];
  }

  // ---------- includes ----------
  // include ‡∏ù‡∏±‡πà‡∏á role (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á role ‡πÉ‡∏´‡πâ required=true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ join)
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ role filter => ‡πÉ‡∏ä‡πâ INNER JOIN (required: true) ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  const includeUserRole = role
    ? {
        model: User_role,
        as: "user_role",
        required: false, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß user_role
        include: [
          {
            model: Role,
            as: "role",
            attributes: ["role_name"],
            required: true, // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏°‡∏ï‡∏ä‡πå role ‡∏î‡πâ‡∏ß‡∏¢
            where: { role_name: role }, // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ role
          },
        ],
      }
    : {
        model: User_role,
        as: "user_role",
        required: false, // ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ role filter
        include: [
          {
            model: Role,
            as: "role",
            attributes: ["role_name"],
            required: true, // ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô INNER JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ role = null ‡∏°‡∏≤‡πÉ‡∏ô array
          },
        ],
      };

  const includeUserAi = {
    model: User_ai,
    as: "user_ai",
    required: false,
    include: [
      {
        model: Ai,
        as: "ai",
        attributes: ["model_name"],
        required: false,
      },
    ],
  };

  // ‡πÉ‡∏ä‡πâ distinct: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ count ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ join ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß
  const { rows } = await User.findAndCountAll({
    where: userWhere,
    attributes: { exclude: ["password"] },
    include: [includeUserRole, includeUserAi],
    order: [["id", "ASC"]],
    limit,
    offset,
    distinct: true,
  });

  return {
    items: rows,
    page: p,
    pageSize: limit,
    totalCount: rows.length,
  };
};

exports.getByUserId = async (id) => {
  const today = 50000;
  const average = 40000;

  const user = await User.findByPk(id, {
    attributes: { exclude: ["password"] },
    include: [
      {
        model: User_role,
        as: "user_role",
        include: [
          {
            model: Role,
            as: "role", // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö alias ‡πÉ‡∏ô User_role.belongsTo(...)
            attributes: ["role_name"], // << ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ role ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            required: false,
          },
        ],
      },
      {
        model: User_ai,
        as: "user_ai",
        include: [
          {
            model: Ai,
            as: "ai", // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö alias ‡πÉ‡∏ô User_role.belongsTo(...)
            attributes: ["model_name"], // << ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ role ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            required: false,
          },
        ],
      },
    ],
  });

  if (!user) return null;

  // ‡πÅ‡∏õ‡∏•‡∏á Sequelize instance ‚Üí plain object
  const userData = user.toJSON();

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° today, average ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ user_ai
  const userAiWithStats = (userData.user_ai || []).map((ua) => ({
    ...ua,
    today,
    average,
  }));

  // ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô userData
  return {
    ...userData,
    user_ai: userAiWithStats,
  };
};

exports.updateUser = async (id, input, ctx) => {
  return await User.sequelize.transaction(async (t) => {
    const user = await User.findByPk(id, {
      transaction: t,
      include: [
        {
          model: User_ai,
          as: "user_ai",
          include: [
            {
              model: Ai,
              as: "ai", // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö alias ‡πÉ‡∏ô User_role.belongsTo(...)
              attributes: ["model_name"], // << ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ role ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
              required: false,
            },
          ],
        },
      ],
    });

    if (!user) throw new Error("User not found");

    // 1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏õ‡∏Å‡∏ï‡∏¥
    const {
      user_role,
      user_ai, // ‡πÅ‡∏¢‡∏Å relation ‡∏≠‡∏≠‡∏Å
      ...userFields
    } = input;

    console.log(user.user_ai);
    console.log("user_ai", user_ai);

    // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö user ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤ token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    if (Array.isArray(user_ai)) {
      for (const oldData of user.user_ai) {
        console.log(oldData.ai_id);

        const newData = user_ai.find(
          (ai) => Number(ai.ai_id) === Number(oldData.ai_id)
        );
        console.log(newData);
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token
        if (newData.token_count > oldData.token_count) {
          const aiData = await Ai.findByPk(Number(oldData.ai_id));
          console.log(aiData);

          // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
          if (newData.token_count - oldData.token_count >= aiData.token_count) {
            console.log("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
            throw new Error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
          }
        }
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö log ‡πÑ‡∏ß‡πâ
    if (user.ai_access !== input.ai_access && input.ai_access !== undefined) {
      message = `‡∏Å‡∏≥‡∏´‡∏ô‡∏î AI Access ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${user.firstname} ${user.lastname})`;

      await auditLog({
        ctx,
        log_type: "PERSONAL",
        old_data: message,
        new_data: message,
        old_status: user.ai_access,
        new_status: input?.ai_access,
      });

      const toThaiApproval = (val) => {
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö boolean, number, ‡πÅ‡∏•‡∏∞ string ('true'/'false', '1'/'0')
        if (typeof val === "string")
          return ["true", "1", "yes", "y"].includes(val.toLowerCase());
        if (typeof val === "number") return val === 1;
        return !!val;
      };
      const label = (val) => (toThaiApproval(val) ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");

      // ... ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
      await notifyUser({
        userId: id,
        title: "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        message: `‡∏Å‡∏≥‡∏´‡∏ô‡∏î AI Access ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏à‡∏≤‡∏Å ${label(
          user.ai_access
        )} ‡πÄ‡∏õ‡πá‡∏ô ${label(input?.ai_access)}`,
        type: "INFO",

        // ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å scope ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        to: user.email,

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ transaction:
        // transaction: t,
      });
    }

    //‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö log ‡πÑ‡∏ß‡πâ
    if (Array.isArray(user_ai)) {
      for (const oldData of user.user_ai) {
        console.log("oldData", oldData.ai.model_name, oldData.token_count);

        const newData = user_ai.find(
          (ai) => Number(ai.ai_id) === Number(oldData.ai_id)
        );
        console.log("newData", newData, newData.token_count);

        if (oldData.token_count !== newData.token_count) {
          old_message = `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token ‡∏Ç‡∏≠‡∏á Model (${
            oldData.ai.model_name
          }) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${user.firstname} ${
            user.lastname
          }) ${oldData.token_count.toLocaleString()}`;
          new_message = `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token ‡∏Ç‡∏≠‡∏á Model (${
            oldData.ai.model_name
          }) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${user.firstname} ${
            user.lastname
          }) ${newData.token_count.toLocaleString()}`;

          await auditLog({
            ctx,
            log_type: "PERSONAL",
            old_data: old_message,
            new_data: new_message,
            old_status: null,
            new_status: null,
          });

          // ... ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
          await notifyUser({
            userId: id,
            title: "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            message: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Token ‡∏Ç‡∏≠‡∏á Model (${
              oldData.ai.model_name
            }) ‡∏à‡∏≤‡∏Å ${oldData.token_count.toLocaleString()} ‡πÄ‡∏õ‡πá‡∏ô ${newData.token_count.toLocaleString()}`,
            type: "INFO",

            // ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å scope ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            to: user.email,

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ transaction:
            // transaction: t,
          });
        }
      }
    }

    if (Object.keys(userFields).length) {
      await user.update(userFields, { transaction: t });
    }

    // 2) ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà roles ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
    if (Array.isArray(user_role)) {
      await User_role.destroy({ where: { user_id: id }, transaction: t });
      const unique = [...new Set(user_role.map((r) => r.role_id))];
      if (unique.length) {
        await User_role.bulkCreate(
          unique.map((role_id) => ({ user_id: id, role_id })),
          { transaction: t }
        );
      }
    }

    // 3) ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà ais ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
    if (Array.isArray(user_ai)) {
      await User_ai.destroy({ where: { user_id: id }, transaction: t });
      const byAi = new Map();
      for (const it of user_ai) if (!byAi.has(it.ai_id)) byAi.set(it.ai_id, it);
      const bulk = Array.from(byAi.values()).map((it) => ({
        user_id: id,
        ai_id: it.ai_id,
        token_count: it.token_count ?? null,
        token_all: it.token_all ?? null,
      }));
      if (bulk.length) {
        await User_ai.bulkCreate(bulk, { transaction: t });
      }
    }

    // 4) ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    return await User.findByPk(id, {
      include: [
        {
          model: User_role,
          as: "user_role",
          include: [{ model: Role, as: "role", attributes: ["role_name"] }],
        },
        {
          model: User_ai,
          as: "user_ai",
          include: [{ model: Ai, as: "ai", attributes: ["model_name"] }],
        },
      ],
      transaction: t,
    });
  });
};

exports.deleteUser = async (id) => {
  const count = await User.destroy({ where: { id } });
  return count > 0;
};
