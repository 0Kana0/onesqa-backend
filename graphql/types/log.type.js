module.exports = `
  scalar DateTime     # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

  enum LogType {
    PROMPT
    ALERT 
    MODEL
    PERSONAL 
    GROUP
  }

  type Log {
    id: ID!
    edit_name: String!
    log_type: LogType!
    old_data: String!
    new_data: String!
    old_status: Boolean
    new_status: Boolean
    createdAt: DateTime!
    updatedAt: DateTime!
  }
  input LogFilterInput {
    logType: LogType
    startDate: DateTime  # ‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô 2025-10-01T00:00:00
    endDate: DateTime    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô (23:59:59.999) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ inclusive
  }
  # ‡πÄ‡∏î‡∏¥‡∏°: type Log {...} ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  type LogPage {
    items: [Log!]!
    page: Int!
    pageSize: Int!
    totalCount: Int!
  }

  input LogInput {
    edit_name: String!
    log_type: LogType!
    old_data: String!
    new_data: String!
    old_status: Boolean
    new_status: Boolean
  }

  extend type Query {
    # ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
    logs(page: Int = 1, pageSize: Int = 20, where: LogFilterInput): LogPage!
    log(id: ID!): Log
  }

  extend type Mutation {
    createLog(input: LogInput!): Log!
    updateLog(id: ID!, input: LogInput!): Log!
    deleteLog(id: ID!): Boolean!
    deleteLogs: Boolean!
  }
`;
